<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <context id="mysqlTables" targetRuntime="MyBatis3">

        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
     -->
        <property name="autoDelimitKeywords" value="true"/>

        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>


        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- generate entity时，生成hashcode和equals方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <!-- generate entity时，生成serialVersionUID -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!-- 这个插件只会增加字符串字段映射到一个JDBC字符的方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin"/>-->

        <!-- genenat entity时,生成toString -->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>-->

        <!--&lt;!&ndash; Lombok插件 &ndash;&gt;-->
        <!--<plugin type="com.itfsw.mybatis.generator.plugins.LombokPlugin">-->
            <!--&lt;!&ndash; @Data 默认开启,同时插件会对子类自动附加@EqualsAndHashCode(callSuper = true)，@ToString(callSuper = true) &ndash;&gt;-->
            <!--<property name="@Data" value="true"/>-->
            <!--&lt;!&ndash; @Builder 必须在 Lombok 版本 >= 1.18.2 的情况下开启，对存在继承关系的类自动替换成@SuperBuilder &ndash;&gt;-->
            <!--<property name="@Builder" value="false"/>-->
            <!--&lt;!&ndash; @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 &ndash;&gt;-->
            <!--<property name="@AllArgsConstructor" value="false"/>-->
            <!--<property name="@NoArgsConstructor" value="false"/>-->
            <!--&lt;!&ndash; @Getter、@Setter、@Accessors 等使用规则参见官方文档 &ndash;&gt;-->
            <!--<property name="@Accessors(chain = true)" value="false"/>-->
            <!--&lt;!&ndash; 临时解决IDEA工具对@SuperBuilder的不支持问题，开启后(默认未开启)插件在遇到@SuperBuilder注解时会调用ModelBuilderPlugin来生成相应的builder代码 &ndash;&gt;-->
            <!--<property name="supportSuperBuilderForIdea" value="false"/>-->
        <!--</plugin>-->

        <!-- 状态枚举生成插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.EnumTypeStatusPlugin">
            <!-- 是否开启自动扫描根据约定注释格式生成枚举，默认true -->
            <property name="autoScan" value="true"/>
            <!-- autoScan为false,这里可以定义全局需要检查生成枚举类的列名 -->
            <property name="enumColumns" value="type, status"/>
        </plugin>

        <!-- 批量插入插件 -->
<!--        <plugin type="com.itfsw.mybatis.generator.plugins.BatchInsertPlugin">-->
<!--            &lt;!&ndash;-->
<!--            开启后可以实现官方插件根据属性是否为空决定是否插入该字段功能-->
<!--            ！需开启allowMultiQueries=true多条sql提交操作，所以不建议使用！插件默认不开启-->
<!--            &ndash;&gt;-->
<!--            <property name="allowMultiQueries" value="false"/>-->
<!--        </plugin>-->
        <!-- Example Criteria 增强插件 -->
<!--        <plugin type="com.itfsw.mybatis.generator.plugins.ExampleEnhancedPlugin">-->
<!--            &lt;!&ndash; 是否支持已经过时的andIf方法（推荐使用when代替），默认支持 &ndash;&gt;-->
<!--            &lt;!&ndash;<property name="enableAndIf" value="true"/>&ndash;&gt;-->
<!--        </plugin>-->

<!--        <plugin type="com.itfsw.mybatis.generator.plugins.ModelBuilderPlugin"/>-->

<!--        &lt;!&ndash; 自定义注释插件 &ndash;&gt;-->
<!--        <plugin type="com.itfsw.mybatis.generator.plugins.CommentPlugin">-->
<!--            &lt;!&ndash; 自定义模板路径 &ndash;&gt;-->
<!--            <property name="template" value="src/test/resources/test.ftl" />-->
<!--        </plugin>-->

        <!-- 注释 -->
<!--        <commentGenerator>-->
<!--&lt;!&ndash;            <property name="suppressAllComments" value="false"/>&lt;!&ndash; 是否取消注释 &ndash;&gt;&ndash;&gt;-->
<!--            <property name="suppressDate" value="false"/> &lt;!&ndash; 是否生成注释代时间戳 &ndash;&gt;-->
<!--            <property name="addRemarkComments" value="true"/>-->
<!--        </commentGenerator>-->
        <commentGenerator type="com.ithinksky.base.MySQLCommentGenerator">
            <property name="author" value="gaotp"/>
            <property name="dateFormat" value="yyyy/MM/dd"/>
        </commentGenerator>


        <!--		<jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                    connectionURL="${spring.datasource.url}" userId="${spring.datasource.username}"
                    password="${spring.datasource.password}">
                </jdbcConnection>-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://47.100.231.15:3306/tp_risk_control?characterEncoding=UTF-8&#38;useSSL=false"
                        userId="root"
                        password="mysql@LabS@2019">

            <!-- 类的注释-->
            <!-- 设置 useInformationSchema 属性为 true -->
            <property name="useInformationSchema" value="true" />
        </jdbcConnection>


        <!-- java类型处理器
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="com.ithinksky.base.CustomerJavaTypeResolver">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- java模型创建器，是必须要的元素
        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
     -->
        <!-- targetPackage是目标包名, targetProject是包所在的位置 -->
        <!-- javaModelGenerator生成的是实体类, sqlMapGenerator生成的是映射文件, javaClientGenerator生成的是dao -->
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="com.1111.model.entity"
                            targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
        targetPackage/targetProject:同javaModelGenerator
     -->
        <!--对应的xml mapper文件 -->
        <sqlMapGenerator targetPackage="sqlMapper"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
        targetPackage/targetProject:同javaModelGenerator
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
    -->
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.11111.repository" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>


        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
        选择的table会生成一下文件：
        1，SQL map文件
        2，生成一个主键类；
        3，除了BLOB和主键的其他字段的类；
        4，包含BLOB的类；
        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
        6，Mapper接口（可选）

        tableName（必要）：要生成对象的表名；
        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
            4，否则，使用指定的大小写格式查询；
        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

        可选：
        1，schema：数据库的schema；
        2，catalog：数据库的catalog；
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
        5，enableInsert（默认true）：指定是否生成insert语句；
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
        13，modelType：参考context元素的defaultModelType，相当于覆盖；
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
     -->
        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->

        <!--<table tableName="user" mapperName="user.UserMapper"-->
        <!--enableCountByExample="false" enableUpdateByExample="false"-->
        <!--enableDeleteByExample="false" enableSelectByExample="false"-->
        <!--selectByExampleQueryId="false" >-->
        <!--&lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate &ndash;&gt;-->
        <!--<property name="useActualColumnNames" value="false"/>-->
        <!--</table>-->

        <table tableName="%" delimitAllColumns="true"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="useActualColumnNames" value="false"/>
            <!--<generatedKey column="id" sqlStatement="Mysql" identity="true"/>-->
<!--            <columnRenamingRule searchString="^[^_]+" replaceString=""/>-->

            <!--
                earchString="^[^_]+",这个查找字符串就是使用正则表达式来匹配表的字段名
                这个意思就是匹配，开头的任意个非下划线(_)的字符，也就是这种如：c_，abc_。。。等等
                <columnRenamingRule searchString="^[^_]+" replaceString=""/>

                去除表前缀
                <domainObjectRenamingRule searchString="^T" replaceString="" />
                -->
            <!--   去除表前缀， 场景：比如表名为t_user，想要生成User开头的文件，而不是TUser开头的文件。-->
<!--            <domainObjectRenamingRule searchString="^Rc" replaceString="" />-->
        </table>

    </context>
</generatorConfiguration>